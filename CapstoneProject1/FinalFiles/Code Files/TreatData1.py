# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 15:57:48 2020

@author: Rafael
"""

import pandas as pd
import numpy as np

#read train or test dataset
df = pd.read_csv('test.csv', header=0, index_col='Id')

#read file with all categorical columns names.
dfAllCatColumns = pd.read_csv('AllPossibleValuesForCatCols.csv', header=0).columns
#print(dfAllCatColumns)
#dfAllCatColumns = dfAllCatColumns.applymap(lambda x: x.strip() if isinstance(x, str) else x)

#replace typos
df.BldgType = df.BldgType.replace('Twnhs', 'TwnhsI')
df.BldgType = df.BldgType.replace('Duplex', 'Duplx')
df.BldgType = df.BldgType.replace('2fmCon', '2FmCon')

df.MSZoning = df.MSZoning.replace('C (all)', 'C')

df.Exterior2nd = df.Exterior2nd.replace('Wd Shng', 'WdShing')
df.Exterior2nd = df.Exterior2nd.replace('CmentBd', 'CemntBd')
df.Exterior2nd = df.Exterior2nd.replace('Brk Cmn', 'BrkComm')

df.Neighborhood = df.Neighborhood.replace('NAmes', 'Names')

df.MasVnrArea = df.MasVnrArea.replace(1.0,0.0)

for index, col in df.iterrows():
    if((col['MasVnrType'] == 'None') & (col['MasVnrArea'] > 0)):
        df.loc[index, 'MasVnrType'] = 'BrkFace'
df = df.replace({'MasVnrType':{np.nan : 'None'}, 'MasVnrArea': {np.nan : 0}}, value = None)

#identifying columns with null values
nulls = df.isnull().sum()

#using set operations to identify the categorical columns that have null values
catcolswithnan = set(dfAllCatColumns) & set(nulls[nulls>0].index)       

#replace missing values with "No Item" for the cateforical columns
for col in catcolswithnan:
    df[col] = df[col].replace(np.nan, 'No Item')    

#assuming every house has electricity. Missing values are replaced by the standard electrical system
df.Electrical = df.Electrical.replace('No Item', 'SBrkr')

#identify the numerical columns
dfNumericCols = set(df.columns) - set(dfAllCatColumns)
dfNumeric = df[list(dfNumericCols)]

aux = 0

#fill in the missing values for LotFrontage area with an equation generated by exel
for index, col in df.iterrows():    
    if(np.isnan(col['LotFrontage'])):        
        aux = 0.0046*df.loc[index, 'LotArea'] + 27.113 
        if(aux>200):
            df.loc[index, 'LotFrontage'] = 0.0006*df.loc[index, 'LotArea'] + 19.657
        else:
            df.loc[index, 'LotFrontage'] = aux
    if(np.isnan(col['GarageYrBlt'])):
        df.loc[index, 'GarageYrBlt'] = df.loc[index, 'YearBuilt'] - 10
            
#df= df[df.LotFrontage < 200]

#create column with year intervals
df['YearsSinceLastRemod'] = df.YrSold - df['YearRemodAdd']
df['YearsSinceBuilt'] = df.YrSold - df['YearBuilt']

#two numeric columns related to the Garage, when there is no garage, are still showing some NaN
df['YearsSinceGarageBuilt'] = df.YrSold - df['GarageYrBlt']
#the other one is calcluated below

#create empty column
#df['Remodeled?'] = ""

#populate new column, separating houses that have been remodeled and the ones that didn't
#for row in df.index:
#    if(df.loc[row, 'YearBuilt'] == df.loc[row, 'YearRemodAdd']):
#        df.loc[row, 'Remodeled?'] = "no"
#    else:
#        df.loc[row, 'Remodeled?'] = "yes"

#create bins for decades, for column "yearsSinceBuilt"
#df['BinYearBuilt'] = df.YearsSinceBuilt.apply(lambda x: math.floor(x/10))
        
##move SalePrice column to the end
#mid = df['SalePrice']
#df.drop(labels=['SalePrice'], axis=1, inplace = True)
#df['SalePrice'] = mid

df = df.fillna(0)

df.to_csv("DatasetTreated_test.csv", index=True)